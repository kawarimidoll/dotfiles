snippets:
  - name: Make directory and move into that
    keyword: mkcd
    snippet: mkdir -p {{dir_name}} && cd "$_"

  - name: "null"
    keyword: "null"
    snippet: ">/dev/null 2>&1"
    # auto expand condition
    # If not defined, it is only valid at the beginning of a line.
    context:
      # buffer: ''
      lbuffer: '.+\s'
      # rbuffer: ''

  # Regular abbreviations
  - name: cd previous
    keyword: "-"
    snippet: cd -

  - name: bun list packages
    keyword: list
    snippet: pm ls
    context:
      lbuffer: '^bun\s+'

  - keyword: cala
    snippet: cage claude

  - name: claude with caffeinate
    keyword: cld
    snippet: caffeinate -i claude

  - keyword: lg
    snippet: lazygit

  - keyword: ld
    snippet: lazydocker

  - name: difit
    keyword: prit
    snippet: difit HEAD origin/main

  # Global abbreviations (work anywhere in the line)
  - name: pipe ripgrep
    keyword: G
    snippet: "| rg"
    context:
      lbuffer: '.+\s'

  - name: pipe less
    keyword: L
    snippet: "| less"
    context:
      lbuffer: '.+\s'

  - name: pipe tee pbcopy with stderr
    keyword: CP
    snippet: "|& tee >(pbcopy)"
    context:
      lbuffer: '.+\s'

  - name: pipe ripgrep with stderr
    keyword: EG
    snippet: "|& rg"
    context:
      lbuffer: '.+\s'

  - name: pipe less with stderr
    keyword: EL
    snippet: "|& less"
    context:
      lbuffer: '.+\s'

  - name: pipe tee pbcopy
    keyword: ECP
    snippet: "| tee >(pbcopy)"
    context:
      lbuffer: '.+\s'

  - name: redirect stderr to null
    keyword: NE
    snippet: "2> /dev/null"
    context:
      lbuffer: '.+\s'

  - name: redirect all to null
    keyword: NL
    snippet: "> /dev/null 2>&1"
    context:
      lbuffer: '.+\s'

  - name: dev null path
    keyword: "/dn"
    snippet: "/dev/null 2>&1"
    context:
      lbuffer: '.+\s'

completions:
  # just command recipes
  - name: just recipes
    patterns:
      - "^just( .*)? $"
    sourceCommand: "just --summary | tr ' ' '\\n'"
    options:
      --height: 40%
      --cycle: true
      --select-1: true
      --prompt: "'just> '"
      --preview: "just --show {}"

  - name: fuzzy find and edit
    patterns:
      - "^vim?( .*)? $"
      - "^nv(im)?( .*)? $"
    sourceCommand: "fffe -f"
    options:
      --height: 40%
      --cycle: true
      --select-1: true
      --multi: true
      --prompt: "'file> '"
      --preview: "fffe -p {}"

  - name: package scripts
    patterns:
      - "^nr(?: .*)? $"
      - "^npm run(?: .*)? $"
      - "^yarn run(?: .*)? $"
      - "^pnpm run(?: .*)? $"
      - "^bun run(?: .*)? $"
    sourceCommand: 'npm run --json 2>/dev/null | jq -r ''keys | .[]'''
    options:
      --prompt: "'npm run > '"
      --height: 40%
      --cycle: true
      --select-1: true
      --preview: "npm run --json 2>/dev/null | jq -r '.\\\"{}\\\"'"
      --preview-window: "up:1:wrap"

  - name: deno task
    patterns:
      - "^deno task(?: .*)? $"
    sourceCommand: "NO_COLOR=1 deno task 2>&1 | rg -o '^- (.*)' -r '$1'"
    options:
      --prompt: "'deno task> '"
      --height: 40%
      --cycle: true
      --select-1: true
      # xargsを無引数で使うと前後のwhitespaceをtrimできる
      --preview: "NO_COLOR=1 deno task 2>&1 | rg -A 1 '^- {}$' | tail -n 1 | xargs"
      --preview-window: "up:1:wrap"

  # simple sourceCommand, no callback
  - name: kill signal
    patterns:
      - "^kill -s $"
    sourceCommand: "kill -l | tr ' ' '\\n'"
    options:
      --prompt: "'Kill Signal> '"

  # use excludePatterns and callback
  - name: kill pid
    patterns:
      - "^kill( .*)? $"
    excludePatterns:
      # -l, -n or -s is followed by SIGNAL instead of PID
      - " -[lns] $"
    sourceCommand: "LANG=C ps -ef | sed 1d"
    options:
      --multi: true
      --prompt: "'Kill Process> '"
    callback: "awk '{print $2}'"

  # Use null (\0) termination Input / Output
  - name: chdir
    patterns:
      - "^cd $"
    sourceCommand: "fd --type d --hidden --exclude .git --max-depth 5 --print0"
    options:
      # Added --read0 if null termination is used in `sourceCommand` output.
      --read0: true
      --prompt: "'Chdir> '"
      --preview: "eza -1a --icons --color=always {}"
    callback: "cut -z -c 3-"
    callbackZero: true # null termination is used in `callback` I/O
