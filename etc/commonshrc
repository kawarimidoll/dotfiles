has() {
  type "$1" > /dev/null 2>&1
}

# -----------------
#  Aliases
# -----------------
alias bx='bundle exec'
alias cdd='cd ..'
alias cddd='cd ../..'
alias cdddd='cd ../../..'
alias cdf='cd $OLDPWD'
alias cdh='cd ~'
alias cdot="cd ${DOT_DIR}"
alias cp='cp -i'
alias dc='docker container'
alias di='docker image'
alias dp='docker compose'
alias dr='docker run'
alias ds='docker system'
alias egrep='egrep --color=auto'
alias g='git'
alias golint='revive -formatter friendly -config $HOME/.config/revive.toml'
alias gq='ghq get'
alias grep='grep --color=auto'
alias fetch='git fetch --all --prune --tags'
alias fgrep='fgrep --color=auto'
alias fl='flutter'
alias fpull='fetch && pull'
alias lg='lazygit'
alias ls='ls --color=auto'
alias lsf='ls -FAogh --time-style="+%F %R"'
alias mkdir='mkdir -pv'
alias mv='mv -i'
alias nv='nvim'
alias nvinit='nvim ~/.config/nvim/init.vim'
alias nvr='nvim -c "edit #<1"'
alias rc='bundle exec rails console'
alias rm='rm -i --preserve-root'
alias rs='bundle exec rails server'
alias she="vim ${shell_rc}"
alias shl="vim ${shell_rc}.local"
alias shs="source ${shell_rc}"
alias sudo='sudo '
alias vimrc='vim ~/.vimrc'
alias vimrclocal='vim ~/.vimrc.local'
alias vin='vim -u NONE -N'
alias vir='vim -c "edit #<1"'
alias wcl='wc -l'
alias wtf='wtfutil'
alias x='xplr'
alias xcd='cd $(xplr)'

if has 'lsd'; then
  alias ls='lsd'
  alias lsf='lsd -FAl --blocks=permission,size,date,name --date="+%F %R"'
  alias tree='lsd --tree'
fi

if has 'exa'; then
  alias lsf='exa -Falh --no-user --time-style=long-iso --icons --git --color-scale'
  alias tree='exa --all --git-ignore --tree --icons --ignore-glob=.git'
fi

# -----------------
#  Paths
# -----------------
export GOPATH="${HOME}/go"
PATH="${DOT_DIR}/bin:${HOME}/.cargo/bin:${GOPATH}/bin:${PATH}"

# -----------------
#  Functions
# -----------------
img_to_webp() {
  find . -maxdepth 1 \( -name \*.png -or -name \*.jpg -or -name \*.jpeg \) \
    | xargs -I_ sh -c 'printf _" -> "_".webp ..."; cwebp _ -o _".webp" >/dev/null 2>&1; echo " done."'
}

pull() {
  git pull origin "${1:-$(git current-branch)}"
}

push() {
  git push origin "${1:-$(git current-branch)}"
}

switch() {
  git list-branch "$@" | xargs --no-run-if-empty -I_ git switch _
}

delete() {
  git list-branch "$@" | xargs --no-run-if-empty -I_ git branch --delete _
}

merge() {
  git list-branch "$@" | xargs --no-run-if-empty -I_ git merge _
}

stash() {
  [ $# -ne 1 ] && echo 'stash message is required.' && return 1
  git stash save "$1"
}

frg() {
  [ $# -ne 0 ] && rg -F -- "$1"
}

# -----------------
#  fzf
# -----------------
fzf_preview_cmd='head -50'
if has 'bat'; then
  fzf_preview_cmd='bat --color=always --style=header,grid --line-range :50 {}'
fi
export FZF_COMPLETION_TRIGGER=','
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_DEFAULT_OPTS='--height=40% --reverse --border'
export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
export FZF_CTRL_T_OPTS="--preview=${fzf_preview_cmd}"

cgh() {
  has 'ghq' || return 1
  local dir
  dir=$(ghq list | fzf --no-multi --exit-0 --query="$*" --preview="ls -FA1 $(ghq root)/{}")
  [ -n "$dir" ] && cd "$(ghq root)/$dir" || return
}

nvf() {
  find_for_vim | \
    fzf --multi --exit-0 --query="$*" --preview="$fzf_preview_cmd" | \
    xargs --no-run-if-empty --open-tty nvim
}

vif() {
  find_for_vim | \
    fzf --multi --exit-0 --query="$*" --preview="$fzf_preview_cmd" | \
    xargs --no-run-if-empty --open-tty vim
}

# fgt() {
#   local list="fbr select git branch"
#   list="$list\nfsw switch to selected git branch"
#   list="$list\nfmer merge selected git branch to current branch"
#   list="$list\nfdel delete selected git branch"
#   list="$list\nfst check current git status and manage staging"
#   list="$list\nfadd git add and show"
#   list="$list\nfcm git commit with showing staged diff"
#   list="$list\nfshow select commit with show diff"
#   list=$(echo -e "$list" | sed -r 's/(\w+)/\\033[1;33m\1\\033[0m/')
#   local cmd=$(echo -e "$list" | fzf --ansi --cycle --no-multi --tiebreak=begin | sed -e 's/ .*//')
#   [ -n "$cmd" ] && "$cmd"
# }

grass() {
  echo 'Contributions of this week'
  curl -sS https://github.com/kawarimidoll | \
    grep -E "fill.*($(seq 0 6 | \
    xargs -I_ date --date _' days ago' +%Y-%m-%d | paste -s -d '|' -))" | \
    sed -r 's/.+count="([0-9]+)".+date="([0-9\-]+)".+/\2: \1/'
}

__get_oneliners() {
  cat "${DOT_DIR}/etc/oneliners.txt" | \
    fzf --header="@ becomes the cursor position" |  \
    sed 's/\[.*\]//'
}

goinit() {
  if [ -f main.go ]; then
    echo "main.go is already exists!"
    return 1
  fi
  echo -e "package main\n\nfunc main() {\n\n}" > main.go
  go mod init "$((git config --get remote.origin.url || basename `pwd`) | sed -e 's#https\?://##')"
}

gopackage() {
  if [ $# -eq 0 ]; then
    echo "package name is required!"
    echo "usage: gopackage package_name"
    return 1
  fi
  mkdir -p "$1" && \
    echo -e "package $(basename $1)\n\nfunc init() {\n\n}" > "$1/$(basename $1).go"
}

# -----------------
#  xd - extended cd
# -----------------
__source "${DOT_DIR}/etc/xd.sh"

# -----------------
#  broot
# -----------------
__source "${HOME}/.config/broot/launcher/bash/br"

# -----------------
#  OS Setting
# -----------------
OS='unknown'
if [ "$(uname)" = 'Darwin' ]; then
  OS='mac'
elif [ "$(uname)" = 'Linux' ]; then
  OS='linux'
elif [ "$(uname -s | cut -c-5)" = 'MINGW' ]; then
  OS='windows'
fi
export DOT_OS_DIR="${DOT_DIR}/etc/${OS}"
__source "${DOT_OS_DIR}/commonshrc"

browse() {
  # [git-extras/git-browse](https://github.com/tj/git-extras/blob/master/bin/git-browse)
  case "$OSTYPE" in
  darwin*)
    # MacOS
    open "$1" ;;
  msys)
    # Git-Bash on Windows
    start "$1" ;;
  linux*)
    # Handle WSL on Windows
    if uname -a | grep -i -q Microsoft; then
      powershell.exe -NoProfile start "$1"
    else
      xdg-open "$1"
    fi ;;
  *)
    # fall back to xdg-open for BSDs, etc.
    xdg-open "$1" ;;
  esac
}
